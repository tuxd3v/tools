#! /usr/bin/lua

CPUS = {}
ROLE = {}
  ROLE.big    = {}
  ROLE.little = {}
    -- 0xc0f
    ROLE.big    [ "0xc0f" ]  = { "cortex-a15" , "armv7-a"      }
    -- 0xc0e
    ROLE.big    [ "0xc0e" ]  = { "cortex-a17", "armv7-a"       }
    -- 0xd07
    ROLE.big    [ "0xd07" ]  = { "cortex-a57", "armv8-a+crc"   }
    -- 0xd08
    ROLE.big    [ "0xd08" ]  = { "cortex-a72", "armv8-a+crc"   }
    -- 0xd09
    ROLE.big    [ "0xd09" ]  = { "cortex-a73", "armv8-a+crc"   }
    -- 0xd0a
    ROLE.big    [ "0xd0a" ]  = { "cortex-a75", "armv8.2-a"     }
    -- 0xc07
    ROLE.little [ "0xc07" ]  = { "cortex-a7",  "armv7-a"       }
    -- 0xd04
    ROLE.little [ "0xd04" ]  = { "cortex-a35", "armv8-a"       }
    -- 0xd03
    ROLE.little [ "0xd03" ]  = { "cortex-a53", "armv8-a+crc"   }
    -- 0xd05
    ROLE.little [ "0xd05" ]  = { "cortex-a55", "armv8.2-a"     }

-- Manufacturer Implementer ID
idImplementer={
	{ mask = 0xff000000, val = 0x41000000, id = "ARM"           },
	{ mask = 0xff000000, val = 0x42000000, id = "Broadcom"      },
	{ mask = 0xff000000, val = 0x43000000, id = "Cavium"        },
	{ mask = 0xff000000, val = 0x4d000000, id = "Motorola"      },
	{ mask = 0xff000000, val = 0x4e000000, id = "Nvidia"        },
	{ mask = 0xff000000, val = 0x50000000, id = "Applied Micro" },
	{ mask = 0xff000000, val = 0x51000000, id = "Qualcomm"      },
	{ mask = 0xff000000, val = 0x53000000, id = "Samsung"       },
	{ mask = 0xff000000, val = 0x61000000, id = "Apple"         },
}
-- Manufacturer Part ID
manIdpart = {
	-- ARM
	{ mask = 0xff00fff0, val = 0x4100c070, id = "Cortex-A7"  },
	{ mask = 0xff00fff0, val = 0x4100c0f0, id = "Cortex-A15" },
	{ mask = 0xff00fff0, val = 0x4100c0e0, id = "Cortex-A17" },
	{ mask = 0xff00fff0, val = 0x4100d030, id = "Cortex-A53" },
	{ mask = 0xff00fff0, val = 0x4100d040, id = "Cortex-A35" },
	{ mask = 0xff00fff0, val = 0x4100d070, id = "Cortex-A57" },
	{ mask = 0xff00fff0, val = 0x4100d080, id = "Cortex-A72" },
	{ mask = 0xff00fff0, val = 0x4100d090, id = "Cortex-A73" },
	{ mask = 0xff00fff0, val = 0x4100d0a0, id = "Cortex-A75" },
	{ mask = 0xff00fff0, val = 0x4100d0f0, id = "Cortex-A55" },
	-- Broadcom
	{ mask = 0xff00fff0, val = 0x42001000, id = "Brahma-B53" },
	{ mask = 0xff00fff0, val = 0x42005160, id = "ThunderX2"  },
	-- Cavium
	{ mask = 0xff00fff0, val = 0x43000a00, id = "ThunderX"   },
	{ mask = 0xff00fff0, val = 0x43000a10, id = "ThunderX 88xx"  },
	{ mask = 0xff00fff0, val = 0x43000a20, id = "ThunderX 81xx"  },
	{ mask = 0xff00fff0, val = 0x43000a30, id = "ThunderX 83xx"  },
	{ mask = 0xff00fff0, val = 0x43000af0, id = "ThunderX2 99xx" },
	-- Nvidia
	{ mask = 0xff00fff0, val = 0x4e000000, id = "Denver"   },
	{ mask = 0xff00fff0, val = 0x4e000030, id = "Denver 2" },
	-- Applied Micro
	{ mask = 0xff00fff0, val = 0x50000000, id = "X-Gene"   },
	-- Qualcomm
	{ mask = 0xff00fff0, val = 0x51002010, id = "Kryo" },
	{ mask = 0xff00fff0, val = 0x51002050, id = "Kryo" },
	{ mask = 0xff00fff0, val = 0x51002110, id = "Kryo" },
	{ mask = 0xff00fff0, val = 0x51008000, id = "Falkor V1/Kryo" },
	{ mask = 0xff00fff0, val = 0x51008010, id = "Kryo V2"        },
	{ mask = 0xff00fff0, val = 0x5100c000, id = "Falkor"         },
	{ mask = 0xff00fff0, val = 0x5100c010, id = "Saphira"        },
	-- Samsung
	{ mask = 0xff00fff0, val = 0x53000010, id = "M1"      },
	-- Apple
	{ mask = 0xff00fff0, val = 0x61000010, id = "Cyclone" },
	{ mask = 0xff00fff0, val = 0x61000020, id = "Typhoon" },
	{ mask = 0xff00fff0, val = 0x61000030, id = "Typhoon/Capri" },
	{ mask = 0xff00fff0, val = 0x61000040, id = "Twister"       },
	{ mask = 0xff00fff0, val = 0x61000050, id = "Twister/Elba/Malta" },
	{ mask = 0xff00fff0, val = 0x61000060, id = "Hurricane"          },
	{ mask = 0xff00fff0, val = 0x61000070, id = "Hurricane/Myst"     }
}

function getCpuinfo()
	local handle = io.open( "/proc/cpuinfo", "r")
	if ( handle ~= nil )
	then
		CPUINFO = handle:read( "*a" )
		handle:close()
	end
end

function Initialize()
	local aux,snr
	for line in string.gmatch( CPUINFO, "[^%c]+[^\r\n\r\n]+" )
	do
		aux = string.match( line, "^processor[%s]+:[%s]+([%d]+)$" )
		if aux ~= nil then
			snr = aux
			CPUS[ snr ] = {}
			CPUS[ snr ].nr = snr
		end
		aux = string.match( line, "^model name[%s]+:[%s]+([%g%s]+)" )
		if aux ~= nil then CPUS[ snr ].name = aux; end
		aux = string.match( line, "^Features[%s]+:[%s]+([%g%s]+)" )
		if aux ~= nil then CPUS[ snr ].features = aux; end
		aux = string.match( line, "^CPU implementer[%s]+:[%s]+0x([%w]+[^%s])$" )
		if aux ~= nil then CPUS[ snr ].implementer = ( tonumber( aux, 16 ) << 24 ); end
		aux = string.match( line, "^CPU architecture[%s]*:[%s]*([%d]+)" )
		if aux ~= nil then CPUS[ snr ].arch = aux; end
		aux = string.match( line, "^CPU variant[%s]*:[%s]*0x([%w]+)" )
		if aux ~= nil then CPUS[ snr ].variant = tonumber( aux, 16 ); end
		aux = string.match( line, "^CPU part[%s]*:[%s]+0x([%w]+)" )
		if aux ~= nil then CPUS[ snr ].part = tonumber( aux, 16 ); end
		aux = string.match( line, "^CPU revision[%s]*:[%s]+([%d]+)" )
		if aux ~= nil then CPUS[ snr ].revision = aux; end
	end
end

function toString()
	for i,t in pairs( CPUS )
	do
		for k,v in pairs( t )
		do
			print( "Core " .. i .. " : " .. k .. " = " .. v )		
		end
	end
end
---- MAIN
--
getCpuinfo()
Initialize()
toString()



